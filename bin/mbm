#!/bin/bash

VERSION="0.4"

PROGRAM="${0##*/}"

BMDIR=$HOME/.bookmarks
CACHEDIR=$BMDIR/cache
list=$BMDIR/list

mkdir -p $BMDIR
mkdir -p $CACHEDIR
touch $list

die() {
  echo "$@" >&2
  exit 1
}

open() {
  keys="$@"
  if [ -z "$keys" ]
    then
    list
    exit
  fi
  if [ -f $BMDIR/$keys ]
    then
      #if cached url file exists then extracts its url from list file 
      file=`echo $keys | awk -F '/' '{print $NF}'`
      url=`awk -F '|' '/'$file'/{print $1}' $list`
    else
      #search all entries and extract the last url found and open it
      search ${*:2} | awk -F '|' '{print $1}'
      url=`search ${*:2} | awk -F '|' '{print $1}' | tail -1`
      if [ -x $url ]
	then
	  echo no matching url found
	  exit
      fi
  fi
  echo opening "$url"
  echo -n "$url" | xclip -selection "clipboard"
  xdg-open "$url"
}

add(){

  [[ -d $BMDIR/.git ]] || git -C $BMDIR init
  
  overwrite=lulz
  gitnew="new"
  url=$2
  #lowercase tags to reduce duplicate categories
  tags=${@:3}
  tags=${tags,,}
  
  count=$(grep "$url |" "$list" | wc -l)
  if [ $count -gt 0 ]
    then
    read -p "$url already exists, overwrite? y/N " overwrite
  fi

  case $overwrite in
    y|Y|yes)
      echo "**OVERWRITING**"
      sed -i '\^'$url'^d' $list
      gitnew="update"
    ;;
    lulz)
    ;;
    n|N|*)
      exit 0
    ;;
  esac

  urlforfile=$(echo $url | sed 's/[/?=!:_]/-/g')
  cachefile=$CACHEDIR/${urlforfile}.html
  curl -s $url > $cachefile
  
  title=$(sed -rn 's/.*<title>(.*)<\/title>.*/\1/p' $cachefile)
  echo "Description default:$title "
  [ -z $description ] && description=$title
  echo "$url | $description | $cachefile | $tags" >> $list
  
  for tag in $tags ; do
    mkdir -p $BMDIR/tags/$tag
    ln -sf $cachefile $BMDIR/tags/$tag/${urlforfile}.html
  done
  
  git -C $BMDIR add .
  git -C $BMDIR commit -am "$gitnew bookmark $url"
}

fetch(){
  #fetch again all links. record all changes
  tags=$2
  [[ -d $BMDIR/$tags ]] || [[ -f $BMDIR/$tags ]] || die "$BMDIR/$tags does not exist"
  tag=`echo $tags | awk -F '/' '{print $2}'`
  awk -F '|' -v BMDIR=$BMDIR '/'$tag'/ {
      printf("\n%5d update %s",NR,$1)
      system("curl "$1" > "$3"")
      system("git -C "BMDIR" commit -am \"updated "$1"\"")
      }' $list
}

remove(){
  pathfile="$2"
  #check the input is valid
  [[ -f $BMDIR/$pathfile ]] || die "$pathfile does not exist"

  rm $BMDIR/$pathfile || die "could not delete $BMDIR/$pathfile"
  urlfile=`echo $pathfile | awk -F '/' '{print $NF}'`
  sed -i '\^'$urlfile'^d' $list
  rm $BMDIR/tags/*/$urlfile || die "could not delete $pathfile in tags/"
  #cleanup empty tags if necessary
  rmdir --ignore-fail-on-non-empty $BMDIR/tags/*
  git -C $BMDIR commit -am "removed bookmark $urlfile"
}

search(){
  terms="$@"
  termsforgrep=$(echo $terms | sed 's/ /\\|/g')
  for i in $(grep -li "$termsforgrep" $CACHEDIR/*) ; do
    grep $i $list
  done
  #send the last url found to the clipboard
  #echo -n `grep $i $list | awk -F '|' '{print $1}' | tail -1` | xclip -selection "clipboard"
}

list(){
  echo
  cat $list \
    | awk '
    BEGIN { FS = "|" }
    {
      printf "  \033[36m%s\033[0m\n", $1
      printf "  \033[33m%s\033[0m\n", $2
      printf "  \033[90m%s %s\033[0m\n\n", $4, $3
    }'
  echo
}

usage() {
  cat <<EOF
  $PROGRAM $VERSION

  Usage: $PROGRAM [OPTION] [cmd]

  Commands:

    $ $PROGRAM add <url> [<tags>]
        # add a bookmark with the given url and optional tags
        
    $ $PROGRAM search <query>
	# search the bookmarks via full-text <query>
	# the last url is sent to the clipboard
	
    $ $PROGRAM fetch [tags\<tag>]
    $ $PROGRAM fetch [cache\<url>]
    # fetch all bookmarks again
    # optionally fetch only bookmarks under a tag
    #                  only 1 bookmark in cache

    $ $PROGRAM [open] <query>
	# search the bookmarks via full-text <query> or path to url file
	# and open the last url found in the default browser
	
    $ $PROGRAM [ls]
        # list all bookmarks

    $ $PROGRAM rm <urlfile>
        # remove the bookmark

    Options:

     -V, --version   display version information and exit
     -h, --help      display this help information and exit

EOF
}

case "$1" in
  version|-V|--version) echo $PROGRAM $VERSION ;;
  help|-h|--help) usage ;;
  add) add "$@" ;;
  rm) remove "$@" ;;
  ls) list ;;
  fetch) fetch "$@" ;;
  open) open "${*:2}" ;;
  search) search ${*:2} ;;
  *) open "$@";;
esac

exit 0